/*~~~~~~~~~~~~~~~~~~~~~~~~~ ОБЩИЕ СТИЛИ ~~~~~~~~~~~~~~~~~~~~~~~~~*/
$utilities: (
	"position": (
		property: position,
		class: pos,
		values: relative static fixed
	),
	"display": (
		property: display,
		class: d,
		values: none inline "inline-block" block "inline-flex" flex "inline-grid" grid,
	),
	"flex-wrap": (
		property: "flex-wrap",
		class: flex,
		values: wrap "nowrap",
	),
	"flex-direction": (
		property: display,
		responsive: false,
		class: flex,
		values: column "column-reverse" row row-reverse,
	),
	"align-items": (
		responsive: false,
		property: "align-items",
		values: (
			start: "flex-start",
			center: "center",
			end: "flex-end",
		),
	),
	"justify-content": (
		property: "justify-content",
		values: (
			start: "flex-start",
			center: "center",
			end: "flex-end",
			around: "space-around",
			between: "space-between",
		),
	),
	"flex-shrink": (
		responsive: false,
		property: "flex-shrink",
		values: 0 1,
	),
	"flex-grow": (
		property: "flex-grow",
		values: 0 1,
	),
	"height": (
		property: "height",
		values: (
			100p: "100%",
		),
	),
	"order": (
		property: order,
		values: n5 n2 n1 0 1 3 4 5,
	),
	"font-weight": (
		responsive: false,
		property: "font-weight",
		class: fw,
		values: 200 300 400 500 600 700,
	),
	"font-size": (
		property: "font-size",
		class: fz,
		values: (
			10: "10px",
			12: "12px",
			14: "14px",
			16: "16px",
			18: "18px",
			20: "20px",
			24: "24px",
		),
	),
	"line-height": (
		responsive: false,
		property: "line-height",
		class: lh,
		values: (
			1: 1,
			sm: 1.22,
			base: 1.5,
			lg: 2,
		),
	),
	"text-decoration": (
		responsive: false,
		property: "text-decoration",
		values: (
			through: "line-through",
			none: none,
			underline: underline,
		),
	),
	"text-transform": (
		responsive: false,
		property: "text-transform",
		values: uppercase lowercase none,
	),
	"white-space": (
		responsive: null,
		property: "white-space",
		class: text,
		values: nowrap wrap,
	),
	"text-align": (
		property: "text-align",
		responsive: false,
		class: text,
		values: (
			start: left,
			center: center,
			right: right,
		),
	),
	"border-radius": (
		property: "border-radius",
		responsive: false,
		class: brs,
		values: (
			4: 4px,
			8: 8px,
			12: 12px,
			16: 16px,
			20: 20px,
			24: 24px,
			28: 28px,
			32: 32px,
			50p: 50%,
		),
	),
);

.grid {
	display: grid;
}

.flex {
	display: flex;
}

.flex-wrap {
	@extend .flex;
	flex-wrap: wrap;
}

/*Общие стили сетки*/
.vt-center {
	@extend .flex;
	align-items: center;
}

.gt-center {
	@extend .flex;
	justify-content: center;
}

.flex-col {
	display: flex;
	flex-direction: column;
}

.for-table {
	display: none;

	@include table {
		display: block;
	}
}

.color-primary {
	color: var(--color-primary);
}

.color-secondary {
	color: var(--color-secondary);
}

.color-text {
	color: var(--color-text);
}

.b-list {
	--air-l: 30px;
	--air-b: 30px;
	--widthCol: 33.3333%;
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	margin: 0 0 calc(var(--air-b) * -1) calc(var(--air-l) * -1);

	&__col {
		margin: 0 0 var(--air-b) var(--air-l);
		width: calc(var(--widthCol) - var(--air-l));
	}
}

/* display */
.flex-column {
	flex-direction: column;
}

.flex-grow {
	flex-grow: 1;
}

.aic {
	align-items: center;
}

.ais {
	align-items: flex-start;
}

.jcc {
	justify-content: center;
}

@each $prop, $unit in $utilities {
	$property: map-get($unit, property);
	$values: map-get($unit, values);
	$responsive: true;
	$name: $prop;
	$is_important: true;
	$after_value: "!important";

	@if map-has-key($unit, responsive) {
		$responsive: map-get($unit, responsive);
	}

	@if map-has-key($unit, class) {
		$name: map-get($unit, class);
	}

	@if map-has-key($unit, enable-important-utilities) {
		$is_important: map-get($unit, enable-important-utilities);
	}

	@if $is_important != true {
		$after_value: "";
	}

	@if type-of($values) == "map" {
		@each $postfix, $val in $values {
			.#{$name}-#{$postfix} {
				#{$property}: #{$val}#{$after_value};
			}
		}

		@if $responsive == true {
			@each $break, $value_break in $breakpoints {
				@media (max-width: $value_break) {
					@each $postfix, $val in $values {
						.#{$name}-#{$break}-#{$postfix} {
							#{$property}: #{$val}#{$after_value};
						}
					}
				}
			}
		}
	} @else if type-of($values) == "list" or "string" {
		@each $postfix in $values {
			.#{$name}-#{$postfix} {
				#{$property}: #{$postfix}#{$after_value};
			}
		}

		@if $responsive == true {
			@each $break, $value_break in $breakpoints {
				@media (max-width: $value_break) {
					@each $postfix in $values {
						.#{$name}-#{$break}-#{$postfix} {
							#{$property}: #{$postfix}#{$after_value};
						}
					}
				}
			}
		}
	}
}
